version: '3.3'
services:
  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

#   oracledb:
#     image: store/oracle/database-enterprise:12.2.0.1
#     container_name: oracledb
#     ports:
#       - "1521:1521"
#     environment:
#       - "ORACLE_PWD=hardpassword"
# #  --------------------------- oracledb setup
# #  open terminal docker exec -it oracledb bash
# #  sqlplus sys as sysdba;
# #  alter session set "_ORACLE_SCRIPT"=true;
# #  create user hope identified by hardpassword;
# #  GRANT ALL PRIVILEGES TO hope;
# #  after connect DATAGRIP ORACLE_SERVICE_NAME=ORCLCDB.localdomain

# # To download Oracle DB for mac M1 with colima: https://oralytics.com/2022/09/22/running-oracle-database-on-docker-on-apple-m1-chip/

#   minio:
#     image: minio/minio:RELEASE.2022-03-22T02-05-10Z
#     container_name: minio
#     ports:
#       - "9000:9000"
#     environment:
#       MINIO_ROOT_USER: hope
#       MINIO_ROOT_PASSWORD: project-hope
#     command: server /data
    # volumes:
    #   - /minio/data:/data
    #   - /minio/config:/root/.minio
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    #   interval: 30s
    #   timeout: 20s
    #   retries: 3

  # minio_buckets:
  #   image: minio/mc:RELEASE.2022-03-17T20-25-06Z
  #   container_name: miniomc
  #   depends_on:
  #     - minio
  #   entrypoint: >
  #     /bin/sh -c '
  #     sleep 5;
  #     /usr/bin/mc config host add s3 http://minio:9000 hope pr0ject-hope --api S3v4;
  #     [[ ! -z "`/usr/bin/mc ls s3 | grep user`" ]] || /usr/bin/mc mb news;
  #     /usr/bin/mc policy download news;
  #     exit 0;
  #     '

  redis:
    container_name: redis
    image: redis
    ports:
      - 6379:6379
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8085:8081"

  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    ports:
      - "2181:2181"
  kafka:
    image: confluentinc/cp-enterprise-kafka:6.0.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "7086:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    restart: always
      
  # mongodb:
  #   image: mongo:4.4.0
  #   container_name: mongodb
  #   ports:
  #     - 27017:27017
  # #  volumes:
  # #    - data:/data
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=rootuser
  #     - MONGO_INITDB_ROOT_PASSWORD=rootpass

  # mongo-express:
  #   image: mongo-express
  #   container_name: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
  #     - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
  #     - ME_CONFIG_MONGODB_SERVER=mongodb

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - /Users/turkhand/Projects/integration/lego/src/main/resources:/etc/prometheus/
    command: 
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  default:
    name: mongodb_network
