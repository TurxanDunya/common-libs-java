version: '3.3'
services:
  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

  oracledb:
    image: store/oracle/database-enterprise:12.2.0.1
    container_name: oracledb
    ports:
      - "1521:1521"
    environment:
      - "ORACLE_PWD=hardpassword"
#  --------------------------- oracledb setup
#  open terminal docker exec -it oracledb bash
#  sqlplus sys as sysdba;
#  alter session set "_ORACLE_SCRIPT"=true;
#  create user hope identified by hardpassword;
#  GRANT ALL PRIVILEGES TO hope;
#  after connect DATAGRIP ORACLE_SERVICE_NAME=ORCLCDB.localdomain

# To download Oracle DB for mac M1 with colima: https://oralytics.com/2022/09/22/running-oracle-database-on-docker-on-apple-m1-chip/

  minio:
    image: minio/minio:RELEASE.2022-03-22T02-05-10Z
    container_name: minio
    ports:
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: hope
      MINIO_ROOT_PASSWORD: pr0ject-hope
    command: server /data
    # volumes:
    #   - /minio/data:/data
    #   - /minio/config:/root/.minio
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    #   interval: 30s
    #   timeout: 20s
    #   retries: 3

  minio_buckets:
    image: minio/mc:RELEASE.2022-03-17T20-25-06Z
    container_name: miniomc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://minio:9000 hope pr0ject-hope --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep user`" ]] || /usr/bin/mc mb news;
      /usr/bin/mc policy download news;
      exit 0;
      '

  redis:
    container_name: cache
    image: redis
    ports:
      - 6379:6379
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8085:8081"
      
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      
  kafka:
    image: docker.io/bitnami/kafka:3.1
    container_name: zookeeper
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"
      
  mongodb:
    image: mongo:4.4.0
    container_name: mongodb
    ports:
      - 27017:27017
  #  volumes:
  #    - data:/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
      - ME_CONFIG_MONGODB_SERVER=mongodb

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  default:
    name: mongodb_network